name: CI/CD Pipeline with Extra Challenges

on:
  push:
    branches: [main]
    tags: ['v*.*.*']
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      skip-build:
        description: 'Skip build step'
        required: false
        default: 'false'
        type: choice
        options:
        - 'true'
        - 'false'
  schedule:
    - cron: '0 2 * * *'  # Nightly at 2 AM

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: Test on Node.js ${{ matrix.node-version }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16, 18, 20]
        include:
          - node-version: current
            when: ${{ github.event_name == 'schedule' }}
    # Only run current version for scheduled events
    if: |
      (github.event_name != 'schedule' && matrix.node-version != 'current') ||
      (github.event_name == 'schedule' && matrix.node-version == 'current')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run tests with Jest
      run: npm test -- --json --outputFile=test-results/${{ matrix.node-version }}/results.json
      env:
        CI: true

    - name: Upload test results
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.node-version }}
        path: test-results/${{ matrix.node-version }}/
        retention-days: 7

  test-summary:
    name: Test Summary & Validation
    runs-on: ubuntu-latest
    needs: test
    if: always()
    
    steps:
    - name: Download all test results
      uses: actions/download-artifact@v4
      with:
        path: all-test-results
        pattern: test-results-*
        merge-multiple: true

    - name: Generate comprehensive test summary
      run: |
        echo "# üß™ Test Results Summary" > test-summary.md
        echo "Generated on $(date)" >> test-summary.md
        echo "" >> test-summary.md
        
        total_tests=0
        total_passed=0
        total_failed=0
        
        echo "## Detailed Results by Node.js Version" >> test-summary.md
        echo "" >> test-summary.md
        echo "| Node Version | Total Tests | Passed | Failed | Status |" >> test-summary.md
        echo "|--------------|-------------|--------|--------|--------|" >> test-summary.md
        
        # Process each version's test results
        for version in 16 18 20 current; do
          result_file="all-test-results/test-results/$version/results.json"
          if [ -f "$result_file" ]; then
            tests=$(jq '.numTotalTests' "$result_file")
            passed=$(jq '.numPassedTests' "$result_file")
            failed=$(jq '.numFailedTests' "$result_file")
            
            total_tests=$((total_tests + tests))
            total_passed=$((total_passed + passed))
            total_failed=$((total_failed + failed))
            
            if [ "$failed" -eq 0 ]; then
              status="‚úÖ PASSED"
            else
              status="‚ùå FAILED"
            fi
            
            echo "| $version | $tests | $passed | $failed | $status |" >> test-summary.md
          else
            echo "| $version | 0 | 0 | 0 | ‚ö†Ô∏è NO DATA |" >> test-summary.md
          fi
        done
        
        echo "" >> test-summary.md
        echo "## üìä Overall Summary" >> test-summary.md
        echo "" >> test-summary.md
        echo "| Metric | Count |" >> test-summary.md
        echo "|--------|-------|" >> test-summary.md
        echo "| Total Tests | $total_tests |" >> test-summary.md
        echo "| Passed | $total_passed |" >> test-summary.md
        echo "| Failed | $total_failed |" >> test-summary.md
        echo "| Success Rate | $((total_passed * 100 / total_tests))% |" >> test-summary.md
        
        # Save total tests for comparison
        echo "TOTAL_TESTS=$total_tests" >> $GITHUB_ENV

    - name: Validate minimum test count
      run: |
        # This is a simplified version - in real scenario, you'd compare with previous runs
        if [ "$TOTAL_TESTS" -lt 5 ]; then
          echo "‚ùå ERROR: Minimum test count not met. Expected at least 5 tests, found $TOTAL_TESTS"
          exit 1
        else
          echo "‚úÖ SUCCESS: Minimum test count met ($TOTAL_TESTS tests)"
        fi

    - name: Upload test summary
      uses: actions/upload-artifact@v4
      with:
        name: test-summary
        path: test-summary.md

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test
    # Conditional build with skip option from workflow_dispatch
    if: |
      (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')) &&
      needs.test.result == 'success' &&
      (github.event_name != 'workflow_dispatch' || github.event.inputs.skip-build == 'false')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build project
      run: npm run build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/
        retention-days: 30

  approval:
    name: Manual Approval
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && needs.build.result == 'success'
    
    steps:
    - name: Wait for manual approval
      run: |
        echo "‚è≥ Manual approval required before publishing"
        echo "This simulation pauses for 10 seconds to represent manual approval"
        sleep 10
        echo "‚úÖ Approval granted - proceeding to publish"

  publish:
    name: Publish
    runs-on: ubuntu-latest
    needs: approval
    if: github.ref == 'refs/heads/main' && needs.approval.result == 'success'
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/

    - name: Simulate publishing
      run: |
        echo "üöÄ Publishing application"
        echo "üì¶ Build contents deployed successfully!"
        echo "‚úÖ Publication completed at $(date)"
